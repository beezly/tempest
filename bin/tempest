#!/usr/bin/env ruby
require 'gli'
require 'tempest'
require 'yaml'
require 'text-table'

include GLI::App

program_desc 'Control nodes on a Riverbed Stingray Traffic Manager'

version Tempest::VERSION

desc 'Username'
arg_name 'Username'
flag [:username,:u]

desc 'Password'
arg_name 'Password'
flag [:password,:p]

desc 'URL of the Stingray Traffic Manager'
arg_name 'URL'
flag [:url,:s]

desc 'Verbose'
arg_name 'verbose'
switch [:verbose, :v]

desc 'Describe a pool'
arg_name '<pool>'
command :describe do |c|
  c.action do |global_options,options,args|
    pool = args[0]
    raise ArgumentError, "You must specify a pool argument" unless pool
    describe_pool Tempest::Stingray::Pool.new(@sr, pool), global_options[:verbose]
  end
end

desc 'Enable a node'
arg_name '<node> <pool>'
command :enable do |c|
  c.action do |global_options,options,args|
    node = args[0]
    pool = args[1]
    raise ArgumentError, "You must specify a node and pool argument" unless (node and pool)
    p=Tempest::Stingray::Pool.new(@sr, pool)
    p.enable_node node
    describe_pool p, global_options[:verbose]
  end
end

desc 'Disable a node'
arg_name '<node> <pool>'
command :disable do |c|
  c.action do |global_options,options,args|
    node=args[0]
    pool=args[1]
    raise ArgumentError, "You must specify a node and pool argument" unless (node and pool)
    p=Tempest::Stingray::Pool.new(@sr, pool)
    p.disable_node node
    describe_pool p, global_options[:verbose]
  end
end

desc 'Drain a node'
arg_name '<node> <pool>'
command :drain do |c|
  c.action do |global_options,options,args|
    node=args[0]
    pool=args[1]
    raise ArgumentError, "You must specify a node and pool argument" unless (node and pool)
    p=Tempest::Stingray::Pool.new @sr, pool
    p.drain_node node
    describe_pool p, global_options[:verbose]
  end
end

desc 'List pools'
command :pools do |c|
  c.action do |global_options,options,args|
    list_pools @sr.pools, global_options[:verbose]
  end
end

desc 'List vservers'
command :vservers do |c|
  c.action do |global_options,options,args|
    list_vservers @sr.vservers, global_options[:verbose]
  end
end

desc 'List traffic IPs'
command :trafficips do |c|
  c.action do |global_options,options,args|
    list_trafficips @sr.traffic_ips, global_options[:verbose]
  end
end

pre do |global,command,options,args|
  CONFIG_FILE = File.join(ENV['HOME'],'.tempest.yaml')
  if File.exists? CONFIG_FILE
    config_options = YAML.load_file(CONFIG_FILE)
    global.merge!(config_options) { |key, v1, v2| v2 }
  end
  @sr = Tempest::Stingray.new global['url'], global['username'], global['password']
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

#on_error do |exception|
  # Error logic here
  # return false to skip default error handling
#  true
#end

def describe_pool pool, verbose=false
  table = Text::Table.new
  table.head = ['Node']
  table.head += ['State'] if verbose

  all_nodes = {'enabled' => pool.enabled_nodes, 
    'disabled' => pool.disabled_nodes, 
    'draining' => pool.draining_nodes}
    
  all_nodes.map do |nodestate,nodes|
    nodes.map do |node|
      row = [node]
      row.concat [nodestate] if verbose
      table.rows+=[row]
    end
  end

  table.rows.sort_by! { |x| x[0] }
  
  puts table.to_s
end

def list_pools pools, verbose=false
  table = Text::Table.new
  table.head = ['Pool']
  table.head += ['Node','State'] if verbose
      
  pools.each do |name,pool|
    if verbose
      pool.nodes.each { |node| table.rows+= [[name,node,pool.node_state(node)]] }      
    else
      table.rows+=[[name]]
    end
  end  
  
  table.rows.sort_by! { |x| x[0] }
  puts table.to_s
  
end

def list_vservers vservers, verbose=false
  table = Text::Table.new
  table.head = ['Vserver']
  table.head += ['Pool'] if verbose
      
  vservers.each do |name,vserver|
    if verbose
      table.rows+= [[name,vserver.default_pool]]  
    else
      table.rows+=[[name]]
    end
  end  
  
  table.rows.sort_by! { |x| x[0] }
  puts table.to_s
end

def list_trafficips trafficips, verbose=false
  table = Text::Table.new
  table.head = ['Traffic IPs']
  table.rows = []
  table.rows+= trafficips
  table.rows.sort_by! { |x| x[0] }
  puts table.to_s
end

exit run(ARGV)
