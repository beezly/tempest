#!/usr/bin/env ruby
require 'gli'
require 'tempest'
require 'yaml'

include GLI::App

program_desc 'Control nodes on a Riverbed Stingray Traffic Manager'

version Tempest::VERSION

desc 'Username'
arg_name 'Username'
flag [:username,:u]

desc 'Password'
arg_name 'Password'
flag [:password,:p]

desc 'URL of the Stingray Traffic Manager'
arg_name 'URL'
flag [:url,:s]

desc 'Enable a node'
arg_name 'Describe arguments to enable here'
command :enable do |c|
  c.action do |global_options,options,args|
    node = args[0]
    pool = args[1]
    @sr.enable_node node, pool
    puts "enable command ran"
  end
end

desc 'Disable a node'
arg_name 'Describe arguments to disable here'
command :disable do |c|
  c.action do |global_options,options,args|
    node=args[0]
    pool=args[1]
    @sr.disable_node node, pool
    puts "disable command ran"
  end
end

desc 'Drain a node'
arg_name 'Describe arguments to drain here'
command :drain do |c|
  c.action do |global_options,options,args|
    node=args[0]
    pool=args[1]
    @sr.drain_node node, pool
    puts "drain command ran"
  end
end

pre do |global,command,options,args|
  CONFIG_FILE = File.join(ENV['HOME'],'.tempest.yaml')
  if File.exists? CONFIG_FILE
    config_options = YAML.load_file(CONFIG_FILE)
    global.merge!(config_options) { |key, v1, v2| v2 }
  end
  @sr = Stingray.new global['url'], global['username'], global['password']
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
